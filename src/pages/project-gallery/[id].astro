---
import '../../styles/gallery.css';
import { Image } from 'astro:assets';
import Head from '../../components/Head.astro';
import Navbar from '../../components/Navbar.astro';
import Footer from '../../components/Footer.astro';
import FooterBar from '../../components/FooterBar.astro';

export async function getStaticPaths() {

    interface Gallery {
    name: string;
    type: string;
    images: any[];
    }

    const bathroomImages: any = await Astro.glob('../../assets/residential/bathrooms/*').then(files => {
    return files.map(file => file.default);
    });
    const bi = bathroomImages.map((image: any) => {return image});

    const garageImages: any = await Astro.glob('../../assets/residential/garages/*').then(files => {
    return files.map(file => file.default);
    });
    const g = garageImages.map((image: any) => {return image});

    const kitchenImages: any = await Astro.glob('../../assets/residential/kitchens/*').then(files => {
    return files.map(file => file.default);
    });
    const k = kitchenImages.map((image: any) => {return image});

    const stairsAndRailingsImages: any = await Astro.glob('../../assets/residential/stairs-and-railings/*').then(files => {
    return files.map(file => file.default);
    });
    const sr = stairsAndRailingsImages.map((image: any) => {return image});

    const stoneVeneerAccentWallsImages: any = await Astro.glob('../../assets/residential/stone-veneer-accent-walls/*').then(files => {
    return files.map(file => file.default);
    });
    const svaw = stoneVeneerAccentWallsImages.map((image: any) => {return image});

    const sidewalkImages: any = await Astro.glob('../../assets/commercial/sidewalks/*').then(files => {
    return files.map(file => file.default);
    });
    const si = sidewalkImages.map((image: any) => {return image});

    const sonotubFootingsImages: any = await Astro.glob('../../assets/commercial/sonotube-footings/*').then(files => {
    return files.map(file => file.default);
    });
    const sf = sonotubFootingsImages.map((image: any) => {return image});

    const stormSystemImages: any = await Astro.glob('../../assets/commercial/storm-system/*').then(files => {
    return files.map(file => file.default);
    });
    const ss = stormSystemImages.map((image: any) => {return image});

    const turndownSlabsImages: any = await Astro.glob('../../assets/commercial/turndown-slabs/*').then(files => {
    return files.map(file => file.default);
    });
    const ts = turndownSlabsImages.map((image: any) => {return image});

    const undergroundUtilitesImages: any = await Astro.glob('../../assets/commercial/underground-utilities/*').then(files => {
    return files.map(file => file.default);
    });
    const uu = undergroundUtilitesImages.map((image: any) => {return image});

    const retainingWallsImages: any = await Astro.glob('../../assets/commercial/retaining-walls/*').then(files => {
    return files.map(file => file.default);
    });
    const rw = retainingWallsImages.map((image: any) => {return image});

    const bridgesImages: any = await Astro.glob('../../assets/commercial/bridges/*').then(files => {
    return files.map(file => file.default);
    });
    const b = bridgesImages.map((image: any) => {return image});

    const stampedConcreteImages: any = await Astro.glob('../../assets/commercial/stamped-concrete/*').then(files => {
    return files.map(file => file.default);
    });
    const sc = stampedConcreteImages.map((image: any) => {return image});

    const stoneVeneerImages: any = await Astro.glob('../../assets/commercial/stone-veneer/*').then(files => {
    return files.map(file => file.default);
    });
    const sv = stoneVeneerImages.map((image: any) => {return image});

    const subwayImages: any = await Astro.glob('../../assets/commercial/subways/*').then(files => {
    return files.map(file => file.default);
    });
    const s = subwayImages.map((image: any) => {return image});

    const galleries: Record<string, Gallery> = {
        'kitchens': {
            name: 'Kitchens',
            type: 'Residential', 
            images: k,
        },
        'garages': {
            name: 'Garages',
            type: 'Residential', 
            images: g,
        },
        'bathrooms': {
            name: 'Bathrooms',
            type: 'Residential', 
            images: bi,
        },
        'stairs-and-railings': {
            name: 'Stairs and Railings',
            type: 'Residential', 
            images: sr,
        },
        'stone-veneer-accent-walls': {
            name: 'Stone Veneer - Accent Walls',
            type: 'Residential', 
            images: svaw,
        },
        'side-walks': {
            name: 'Sidewalks',
            type: 'Commercial', 
            images: si,
        },
        'sonotube-footings': {
            name: 'Sonotube Footings',
            type: 'Commercial', 
            images: sf,
        },
        'storm-systems': {
            name: 'Storm Systems',
            type: 'Commercial', 
            images: ss,
        },
        'turndown-slabs': {
            name: 'Turndown Slabs',
            type: 'Commercial', 
            images: ts,
        },
        'underground-utilities': {
            name: 'Underground Utilities',
            type: 'Commercial', 
            images: uu,
        },
        'retaining-walls': {
            name: 'Retaining Walls',
            type: 'Commercial', 
            images: rw,
        },
        'bridges': {
            name: 'Bridges',
            type: 'Commercial', 
            images: b,
        },
        'stamped-concrete': {
            name: 'Stamped Concrete',
            type: 'Commercial', 
            images: sc,
        },
        'stone-veneer': {
            name: 'Stone Veneer',
            type: 'Commercial', 
            images: sv,
        },
        'subways': {
            name: 'Subways',
            type: 'Commercial', 
            images: s,
        },
    };

    const paths = Object.keys(galleries).map((key) => ({
        params: { id: key },
        props: { gallery: galleries[key] }, 
    }));

    return paths;
    }

    const gallery = Astro.props?.gallery;
---

<Head title="Gallery"/>

<Navbar />

<main class="gallery-main">
    <a href={`/${gallery.type.toLowerCase()}-projects`} class="back-to">Back to {gallery.type} Projects</a>
    <h1>{gallery.name}</h1>
    <div class="gallery-container">
        {gallery.images.map((image, index) => (
        <Image 
        src={image} 
        alt={`${gallery.name} Image`} 
        class="gallery-image"
        id={`image-${index}`}
         />
        ))}
    </div>
</main>

<div class="preview-overlay" style="display: none;">
    <div class="preview-frame">
        <img src="" alt="Preview Image" class="preview-image" />
        <button class="close-btn">X</button>
    </div>
</div>

<script>
    const openPreview = (image: string): void => {
        const overlay = document.querySelector(".preview-overlay") as HTMLElement;
        const previewImage = document.querySelector(".preview-image") as HTMLImageElement;

        if (overlay && previewImage) {
            previewImage.src = image;
            overlay.style.display = "flex"; 
        }
    };

    const closePreview = (): void => {
        const overlay = document.querySelector(".preview-overlay") as HTMLElement;
        if (overlay) {
            overlay.style.display = "none"; 
        }
    };

    document.addEventListener('DOMContentLoaded', () => {
        const images = document.querySelectorAll('.gallery-image');
        images.forEach((img) => {
            img.addEventListener('click', () => {
                const src = img.getAttribute('src');
                if (src) {
                    openPreview(src);
                }
            });
        });

        const overlay = document.querySelector('.preview-overlay') as HTMLElement;
        if (overlay) {
            overlay.addEventListener('click', closePreview);
        }

        const closeButton = document.querySelector('.close-btn') as HTMLElement;
        if (closeButton) {
            closeButton.addEventListener('click', closePreview);
        }
    });
</script>

<Footer />
<FooterBar />